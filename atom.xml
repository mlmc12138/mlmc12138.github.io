<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mlmc12138.github.io</id>
    <title>Gridea</title>
    <updated>2022-02-09T13:27:00.154Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mlmc12138.github.io"/>
    <link rel="self" href="https://mlmc12138.github.io/atom.xml"/>
    <subtitle>叶凡的主页</subtitle>
    <logo>https://mlmc12138.github.io/images/avatar.png</logo>
    <icon>https://mlmc12138.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[二分查找]]></title>
        <id>https://mlmc12138.github.io/post/er-fen-cha-zhao/</id>
        <link href="https://mlmc12138.github.io/post/er-fen-cha-zhao/">
        </link>
        <updated>2022-02-09T12:32:21.000Z</updated>
        <content type="html"><![CDATA[<p>二分查找是非常经典的算法；虽然不复杂，但是有很多细节在里面，只有掌握好细节，才能将二分查找练好；</p>
<h3 id="核心代码">核心代码</h3>
<pre><code class="language-js">var search = function(nums, target) {
  let sum = 0
  let left = 0
  let right = nums.length-1
  while(left&lt;=right) {
    let mid = (left +(right-left))&gt;&gt;1
    if(nums[mid]==target) {
       return mid
    } else if(nums[mid&gt;target]) {
      right = mid - 1
    } else if(nums[mid]&lt;target) {
      left = mid + 1
    }
  }
};
</code></pre>
<p>值得注意的点就是 while循环里的 条件是 left &lt; right 还是 left &lt;= right；以及 mid是+1还是-1的问题</p>
<h2 id="为什么-while-循环的条件中是-而不是">为什么 while 循环的条件中是 &lt;=，而不是 &lt;？</h2>
<p>因为初始化 right 的赋值是 nums.length - 1，即最后一个元素的索引，而不是 nums.length。<br>
这二者可能出现在不同功能的二分查找中，区别是：前者相当于两端都闭区间 [left, right]，后者相当于左闭右开区间 [left, right)，因为索引大小为 nums.length 是越界的。<br>
我们这个算法中使用的是前者 [left, right] 两端都闭的区间。这个区间其实就是每次进行搜索的区间。<br>
while(left &lt;= right) 的终止条件是 left == right + 1，写成区间的形式就是 [right + 1, right]，或者带个具体的数字进去 [3, 2]，可见这时候区间为空，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p>
<p>while(left &lt; right) 的终止条件是 left == right，写成区间的形式就是 [2, 2]，这时候区非空，还有一个数 2，但此时 while 循环终止了。也就是说这区间 [2, 2] 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p>
<h2 id="为什么-left-mid-1right-mid-1我看有的代码是-right-mid-或者-left-mid没有这些加加减减到底怎么回事怎么判断">为什么 left = mid + 1，right = mid - 1？我看有的代码是 right = mid 或者 left = mid，没有这些加加减减，到底怎么回事，怎么判断？</h2>
<p>当发现索引 mid 不是要找的 target 时，下一步应该去搜索 [left, mid-1] 或者 [mid+1, right]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[单链表题目]]></title>
        <id>https://mlmc12138.github.io/post/dan-lian-biao-ti-mu/</id>
        <link href="https://mlmc12138.github.io/post/dan-lian-biao-ti-mu/">
        </link>
        <updated>2022-02-06T12:20:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="合并两个有序单链表">合并两个有序单链表：</h3>
<p>​        题目链接：https://leetcode-cn.com/problems/merge-two-sorted-lists/</p>
<p>​        思路：比较两个链表的值，将值较小的加入到结果链表中</p>
<p>​		代码：</p>
<pre><code class="language-js">var mergeTwoLists = function(list1, list2) {
  if(list1===null) {
    return list2
  }
  if(list2===null) {
    return list1
  }
  if(list1.val&lt;list2.val) {
    list1.next = mergeTwoLists(list1.next,list2)
    return list1
  }
  else {
    list2.next = mergeTwoLists(list1,list2.next)
    return list2
  }
};
</code></pre>
<h3 id="环形链表">环形链表</h3>
<p>​		题目地址：https://leetcode-cn.com/problems/linked-list-cycle/</p>
<p>​		思路：通过快慢指针进行判断，快指针一次走两步，慢指针一次走一步，若链表中存在环，则两指针一定会有重合的时候</p>
<p>​		代码：</p>
<pre><code class="language-js">var hasCycle = function(head) {
    let left = head
    let right = head
    while(right!=null&amp;&amp;right.next!=null) {
      left = left.next
      right = right.next.next
      if(left==right) {
        return true
      }
    }
    return false
};
</code></pre>
<h3 id="链表的中间节点">链表的中间节点</h3>
<p>​			题目地址： https://leetcode-cn.com/problems/middle-of-the-linked-list/</p>
<p>​			思路： 通过快慢指针进行判断，指针运动方式 慢指针一次一步 快指针一次两步 这样当快指针到达尾部时，慢指针所在的位置就是链表的中点</p>
<p>​			代码</p>
<pre><code class="language-js">var middleNode = function(head) {
    let slow =  head
    let fast = head
    while(fast&amp;&amp;fast.next) {
        fast = fast.next.next
        slow = slow.next
    }
    return slow
};
</code></pre>
<h3 id="删除单链表的倒数第k个元素">删除单链表的倒数第k个元素</h3>
<p>​			题目地址：https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</p>
<p>​			思路： 也是通过快慢指针；要删除倒数第k个元素即要从前向后走 n-k 步 （n为链表长度） 让两指针相距k，当快指针走到最后时，慢指针的next即为倒数第k个元素</p>
<p>​			代码：</p>
<pre><code class="language-js"> var removeNthFromEnd = function (head, n) {
      var left = head
      var right = head
      while(n&gt;0) {
        right = right.next
        n--
      }
      if(!right) return head.next
      while(right&amp;&amp;right.next) {
        left = left.next
        right = right.next
      }
      left.next = left.next.next
      return head
    };
</code></pre>
<p>这些都是比较经典的单链表相关的问题，大部分题目都是使用双指针去解决的；在做题时一定要灵活运用双指针</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mlmc12138.github.io/post/hello-gridea/</id>
        <link href="https://mlmc12138.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>