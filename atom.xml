<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mlmc12138.github.io</id>
    <title>Gridea</title>
    <updated>2022-03-05T13:36:12.727Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mlmc12138.github.io"/>
    <link rel="self" href="https://mlmc12138.github.io/atom.xml"/>
    <subtitle>叶凡的主页</subtitle>
    <logo>https://mlmc12138.github.io/images/avatar.png</logo>
    <icon>https://mlmc12138.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[js深浅拷贝]]></title>
        <id>https://mlmc12138.github.io/post/js-shen-qian-kao-bei/</id>
        <link href="https://mlmc12138.github.io/post/js-shen-qian-kao-bei/">
        </link>
        <updated>2022-03-05T13:21:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="用处">用处</h1>
<p>当我们需要对一个引用值进行复制时，我们就需要用到拷贝</p>
<h1 id="例子">例子</h1>
<h4 id="原始值拷贝">原始值拷贝</h4>
<pre><code class="language-js">    let a = 12
    let b = a
    a = 13
    console.log(b) // 打印出 12
</code></pre>
<h4 id="引用值拷贝错误版">引用值拷贝(错误版)</h4>
<p>如果我们使用与原始值相同的拷贝方法就会出现以下结果</p>
<pre><code class="language-js">     let obj1 = {
        name: &quot;小明&quot;,
        age: 17
     }
     let obj2 = obj1
     obj1.name = &quot;小红&quot;
     console.log(obj2.name) // 此时输出为小明
</code></pre>
<p>因为对 obj2 进行赋值时，仅仅复制了 obj1 的指针，而指针的指向仍然是同一个对象，所以当我们通过 obj1 改变的对象与 obj2 指向的对象是同一个对象；</p>
<h4 id="浅拷贝">浅拷贝</h4>
<ul>
<li>es3写法</li>
</ul>
<pre><code class="language-js"> let obj1 = {
     name: &quot;小明&quot;,
     age: 17
 }   
 function simpleClone(obj) {
   var cloneObj = {}
   // es3 的写法
   for(let i in obj) {
     cloneObj[i] = obj[i]
   }
   return cloneObj
 }
 let obj2 = simpleClone(obj1)
 obj1.name = &quot;小红&quot;
 console.log(obj2.name) // 小明
 console.log(obj1.name) // 小红
</code></pre>
<ul>
<li>es6 写法</li>
</ul>
<pre><code class="language-js"> let obj1 = {
     name: &quot;小明&quot;,
     age: 17
 }   
 function simpleClone(obj) {
   var cloneObj = {}
   // for(let key of Object.keys(obj1)) {
   //   cloneObj[key] = obj1[key]
   // }
   for(let [key,value] of Object.keys(obj1)) {
       cloneObj[key] = value
   }
   return cloneObj
 }
 let obj2 = simpleClone(obj1)
 obj1.name = &quot;小红&quot;
 console.log(obj2.name) // 小明
 console.log(obj1.name) // 小红
</code></pre>
<h4 id="深拷贝">深拷贝</h4>
<ul>
<li>利用递归层层拷贝</li>
</ul>
<pre><code class="language-js">
 let obj1 = {
   a: 1,
   b: 3,
   c: {
     e: {
       f: 8
     },
       g: 4
   },
   h: 7
  }
function deepClone(obj,cloneObj) {
var cloneObj = cloneObj || {}
for(let i in obj) {
 if(typeof obj[i]=== 'object' &amp;&amp; obj[i] !== null) {
   cloneObj[i] = {}
   deepClone(obj[i],cloneObj[i])
 } else {
   cloneObj[i] = obj[i]
 }
}
return cloneObj
}
let obj2 = deepClone(obj1)
obj1.c.g = 10
console.log(obj2.c.g) 

</code></pre>
<ul>
<li>利用 JSON.parse() 和 JSON.stringify  先将其转化为字符串，在重新转化为对象</li>
</ul>
<pre><code class="language-js">	 let obj1 = {
       a: 1,
       b: 3,
       c: {
         e: {
           f: 5,
           i: [1,2,4,5]
         },
         g: 4
       },
       h: 7
     }
    function deepClone(obj,cloneObj) {
    // 利用 JSON.parse() 和 JSON.stringify  先将其转化为字符串，在重新转化为对象
      return JSON.parse(JSON.stringify(obj))
    }
    let obj2 = deepClone(obj1)
    obj1.c.e.i.push(10)
    console.log(obj1);
    console.log(obj2)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[js 原型对象与原型链]]></title>
        <id>https://mlmc12138.github.io/post/js-yuan-xing-dui-xiang-yu-yuan-xing-lian/</id>
        <link href="https://mlmc12138.github.io/post/js-yuan-xing-dui-xiang-yu-yuan-xing-lian/">
        </link>
        <updated>2022-02-19T01:43:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="基本概念">基本概念</h2>
<p>每个对象都有自己的原型对象，它可以使用其原型链上的所有属性和方法。</p>
<h2 id="获取原型的几种方式">获取原型的几种方式</h2>
<ul>
<li>通过对象的 <code>__proto__</code>  获取<pre><code class="language-js"> let cat = {
      name: &quot;喵喵&quot;
  }
  // 在 cat 的原型对象上添加一个 eat 方法
  cat.__proto__.eat = function() {
      console.log(&quot;吃鱼&quot;)
  }
  cat.eat()       // 打印出吃鱼 说明 cat 使用了其原型上的方法
</code></pre>
</li>
<li>通过构造函数的  <code>prototype</code>  获取<pre><code class="language-js">function Dog(name,age) {
   this.name = name
   this.age = age
 }
 // 在 Dog 的原型对象上添加一个 eat 方法
 Dog.prototype.eat = ()=&gt; {
   console.log(&quot;吃骨头&quot;);
 }
 let dog = new Dog(&quot;大黄&quot;,2)
 dog.eat()  //打印出吃骨头
</code></pre>
</li>
</ul>
<h2 id="原型对象的应用">原型对象的应用</h2>
<p>如果我们执行以下代码</p>
<pre><code class="language-js">    let date = new Date()
    console.log(date)
</code></pre>
<p>此时会打印下图中第一行的结果<br>
<img src="https://mlmc12138.github.io/post-images/1645236185058.png" alt="" loading="lazy"></p>
<p>如果我们想要打印第二行 这样格式的时间呢； 此时我们就可以给 Date的原型对象添加一个方法 来将输出格式化，具体代码如下</p>
<pre><code class="language-js">  let data = new Date()
    Date.prototype.formate = function() {
      let year = this.getFullYear()
      let month = this.getMonth()
      let date =  this.getDate()
      return `${year}年${month}月${date}日`
    }
    console.log(data.formate());
</code></pre>
<p>此时就能输出 第二行格式的时间了</p>
<h2 id="原型对象类与继承">原型对象类与继承</h2>
<p>类获取原型的方式与构造函数一样，都是通过 <code>prototype</code> 属性去获取</p>
<pre><code class="language-js">  class Cat {
      constructor(name,age) {
         this.name = name
         this.age = age
      }
    }
    Cat.prototype.eat = function() {
      console.log(&quot;吃鱼&quot;);
    }
    let cat = new Cat(&quot;喵喵&quot;,2)
    console.log(cat.name);
    cat.eat()    // 输出吃鱼
</code></pre>
<h3 id="类的继承实例">类的继承实例</h3>
<p>实现 管理员与普通用户 管理员拥有普通用户有的所有属性和功能</p>
<pre><code class="language-js">    class User {
      constructor(name,password) {
        this.name = name
        this.password = password
      }
      login() {
        console.log(&quot;登录&quot;);
      }
    }
    // 继承 User 类 获取 其中的属性与方法
    class Admin extends User{
        removeUser() {
          console.log(&quot;删除&quot;);
        }
    }
    let admin = new Admin()
    // 此时 admin 就可以使用 User 中的 login 方法
    admin.login()
</code></pre>
<h2 id="原型继承与原型链">原型继承与原型链</h2>
<p>用ES6的 class 我们实现了上述功能，如果不用ES6我们要如何实现上述功能呢？<br>
我们可以通过改变构造方法原型对象的指向 在这个例子中，我们就将 Admin 的原型对象 指向 User 这样的话，Admin就拥有User所有的属性和方法了； 具体代码如下</p>
<pre><code class="language-js">   function User(name,password) {
      this.name = name
      this.password = password
      this.login = function () {
        console.log(&quot;登录&quot;)
      }
    }
    function Admin() {
      this.removeUser = function () {
        console.log(&quot;删除用户&quot;);
      }
    }
  //  基于原型的继承 通过将对象的原型指向要继承的对象
    Admin.prototype = new User()
    let admin = new Admin()
    admin.login()
</code></pre>
<p>那么什么是原型链呢？<br>
每个对象都有自己的原型对象，它的原型对象也有自己的原型对象，如下图所示<br>
<img src="https://mlmc12138.github.io/post-images/1645238628971.png" alt="" loading="lazy"></p>
<p><strong>Tips：<code>Object.prototype</code> 是所有对象的原型对象</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue项目打包后页面空白问题]]></title>
        <id>https://mlmc12138.github.io/post/vue-xiang-mu-da-bao-hou-ye-mian-kong-bai-wen-ti/</id>
        <link href="https://mlmc12138.github.io/post/vue-xiang-mu-da-bao-hou-ye-mian-kong-bai-wen-ti/">
        </link>
        <updated>2022-02-15T02:47:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第一种情况-资源加载失败">第一种情况 资源加载失败</h1>
<p>报错如下<br>
<img src="https://mlmc12138.github.io/post-images/1644893370600.png" alt="" loading="lazy"><br>
这个问题是由于路径的问题，我们可以在项目下新建一个  <code>vue.config.js</code>  文件，在里面我们输入如下代码</p>
<pre><code class="language-js">module.exports = {
  publicPath:'./'
}
</code></pre>
<p>再重新进行打包就可以了，这时候的资源都能够加载成功了</p>
<h1 id="第二种情况-无报错">第二种情况 无报错</h1>
<p>此时我们可能在使用路由时，为了美观将其<code>mode</code>改为了history模式，此时我们需要将其改为<code>hash</code>模式才能正常显示，这时候我们要找到 <code>src/router</code> 下的<code>index.ts/index.js</code>文件将 <code>createWebHistory</code>改为 <code>createWebHashHistory</code>即可<br>
<img src="https://mlmc12138.github.io/post-images/1644894139898.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://mlmc12138.github.io/post-images/1644894146987.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://mlmc12138.github.io/post-images/1644894223118.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://mlmc12138.github.io/post-images/1644894234700.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[防抖与节流]]></title>
        <id>https://mlmc12138.github.io/post/fang-dou-yu-jie-liu/</id>
        <link href="https://mlmc12138.github.io/post/fang-dou-yu-jie-liu/">
        </link>
        <updated>2022-02-12T06:53:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="防抖">防抖</h1>
<h3 id="概念">概念</h3>
<p>用户操作触发事件频繁，只要最后一次的操作</p>
<h3 id="使用场景">使用场景</h3>
<pre><code class="language-html">&lt;body&gt;
  &lt;input type=&quot;text&quot;&gt;
  &lt;script&gt;
    let inp = document.querySelector(&quot;input&quot;)
    inp.oninput = function() {
      console.log(this.value);
    }
  &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<p>当我们在输入框中输入一个“前”字时，以上代码在执行时，会出现如下图所示的情况<br>
<img src="https://mlmc12138.github.io/post-images/1644649282426.png" alt="" loading="lazy"><br>
仅输入一个“前”字函数就执行了五次。那么当我们输入的字符串很长时，函数执行的次数也会变得很多；如果我们要发送请求的话，请求会变得非常频繁，导致性能下降；</p>
<!-- more -->
<p>如何把函数执行的次数降低，就是防抖的使用场景</p>
<h3 id="第一种方式-非立即执行">第一种方式-非立即执行</h3>
<p>当用户进行输入时，不会立即执行函数，而是等待 n 秒后再去执行函数，如果在此期间用户有新的输入，则重新计算 n；</p>
<pre><code class="language-js">    let inp = document.querySelector(&quot;input&quot;)
    let timer = null
    inp.oninput = function () {
      if (timer !== null) {
        clearTimeout(timer)
      }
      timer = setTimeout(() =&gt; {
        console.log(this.value);
      }, 500)
    }
</code></pre>
<h3 id="第一种方式的优化">第一种方式的优化</h3>
<p>原理一样，只不过优化后的代码更容易维护，并且没有又创建一个全局变量</p>
<pre><code class="language-js">    inp.oninput = debouce(function(){
      console.log(this.value);
    },500)
    function debouce(fn, delayTime) {
       let timer = null
       return function () {
        if (timer !== null) {
          clearTimeout(timer)
        }
        timer = setTimeout(() =&gt; {
           fn.call(this)
        }, delayTime)
      }
    } 
</code></pre>
<h3 id="第二种方式-立即执行">第二种方式-立即执行</h3>
<p>用户第一次输入时立刻触发，然后n秒后不触发该事件才能继续执行函数</p>
<pre><code class="language-js">     function debouce(fn, delayTime) {
      let timer = null
      let flag = true
      return function () {
        clearTimeout(timer)
        if(flag) {
          fn.call(this)
          flag = false
        }
        timer = setTimeout(() =&gt; {
          flag = true
        }, delayTime)
      }
    } 
</code></pre>
<h3 id="结合版本">结合版本</h3>
<pre><code class="language-js">function debounce_merge(fn,delayTime = 500,isImmediate = false){
  let timer= null;
  let flag = true;
  if(isImmediate){
    return function(){
      clearTimeout(timer);
      if(flag){
        fn.call(this);
        flag = false
        }
      timer = setTimeout(() =&gt; { flag = true},delayTime)
    }
  }
  return function(){
    clearTimeout(timerId);
    timer = setTimeout(() =&gt; {
      fn.call(this)
    },delayTime)
  }
}
</code></pre>
<h1 id="节流">节流</h1>
<h3 id="概念-2">概念</h3>
<p>用户触发事件频繁，减少事件执行的次数；如触发1000次，使用节流使其触发次数减少到10</p>
<h3 id="使用场景-2">使用场景</h3>
<pre><code class="language-html">&lt;body&gt;
  &lt;script&gt;
    window.onscroll = ()=&gt; {
      console.log(&quot;hello world!&quot;);
    }
    // 
  &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<p>当我们滚动上图代码展示的页面时 会发生这样的效果<br>
<img src="https://mlmc12138.github.io/post-images/1644657207757.png" alt="" loading="lazy"><br>
稍微滚动，函数就会被执行很多次；我们想让其执行次数减少到我们想让它执行的次数，这时候我们就要用到节流了</p>
<h3 id="第一种方法-非立即执行">第一种方法 - 非立即执行</h3>
<p>通过定时器限定多久执行一次</p>
<pre><code class="language-js">   let flag = true
      window.onscroll = ()=&gt; {
        if(flag) {
          setTimeout(()=&gt; {
            console.log(&quot;Hello world&quot;);
            flag = true
          },500)
        }
        flag = false
      }
</code></pre>
<h3 id="函数优化">函数优化</h3>
<p>优化方法与防抖函数的优化相同</p>
<pre><code class="language-js"> window.onscroll = throttle(function(){
      console.log(this.value);
    },500)
    function throttle(fn, delayTime) {
      let flag = true
      return function () {
        if (flag) {
          setTimeout(() =&gt; {
            fn()
            flag = true
          }, delayTime)
        }
        flag = false
      }
    }
</code></pre>
<h3 id="第二种方法-立即执行">第二种方法 - 立即执行</h3>
<pre><code class="language-js">    function throttle(fn, delayTime) {
      let flag = true
      return function () {
        if (flag) {
          setTimeout(() =&gt; {
            fn()
            flag = true
          }, delayTime)
        }
        flag = false
      }
    }
</code></pre>
<h3 id="第三种方法-时间戳版本">第三种方法 - 时间戳版本</h3>
<p>创建时间戳，在时间戳内，函数只执行一次</p>
<pre><code class="language-js">    window.onscroll = throttle(function(){
      console.log(&quot;Hello world!&quot;);
    },1000)
    function throttle(fn, delayTime) {
      let pre = 0
      return function(){
        let now = Date.now()
        if(now-pre&gt;delayTime) {
          fn.call(this)
          pre = now
        }
      }
    }
</code></pre>
<h1 id="总结">总结</h1>
<ul>
<li>相同点
<ul>
<li>防抖与节流都是为了防止函数在短时间内被频繁的触发</li>
</ul>
</li>
<li>不同点
<ul>
<li>防抖函数只执行最后一次的操作，类似游戏中的回城，在回城期间，进行操作会打断回城<br>
<img src="https://mlmc12138.github.io/post-images/1644675406390.gif" alt="" loading="lazy"></li>
<li>节流类似将多个操作合并为一个，类似于游戏中的技能释放，释放后技能会进入CD，CD完成后才能再次进行施法<br>
<img src="https://mlmc12138.github.io/post-images/1644675346108.gif" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[杂记]]></title>
        <id>https://mlmc12138.github.io/post/za-ji/</id>
        <link href="https://mlmc12138.github.io/post/za-ji/">
        </link>
        <updated>2022-02-10T14:04:59.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>分享我喜欢的歌手 房东的猫 浪漫才子-吴佩玲 人间理想-王心怡</p>
<!-- more -->
<p><img src="https://mlmc12138.github.io/post-images/1644503847765.png" alt="" loading="lazy"><br>
<img src="https://mlmc12138.github.io/post-images/1644503877133.png" alt="" loading="lazy"></p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分查找]]></title>
        <id>https://mlmc12138.github.io/post/er-fen-cha-zhao/</id>
        <link href="https://mlmc12138.github.io/post/er-fen-cha-zhao/">
        </link>
        <updated>2022-02-09T12:32:21.000Z</updated>
        <content type="html"><![CDATA[<p>二分查找是非常经典的算法；虽然不复杂，但是有很多细节在里面；要做到看到能使用二分的题立刻想出思路</p>
<h3 id="核心代码">核心代码</h3>
<pre><code class="language-js">var search = function(nums, target) {
  let sum = 0
  let left = 0
  let right = nums.length-1
  while(left&lt;=right) {
    let mid = (left +(right-left))&gt;&gt;1
    if(nums[mid]==target) {
       return mid
    } else if(nums[mid&gt;target]) {
      right = mid - 1
    } else if(nums[mid]&lt;target) {
      left = mid + 1
    }
  }
};
</code></pre>
<p>值得注意的点就是 while循环里的 条件是 left &lt; right 还是 left &lt;= right；以及 mid是+1还是-1的问题</p>
<h2 id="为什么-while-循环的条件中是-而不是">为什么 while 循环的条件中是 &lt;=，而不是 &lt;？</h2>
<p>因为初始化 right 的赋值是 nums.length - 1，即最后一个元素的索引，而不是 nums.length。<br>
这二者可能出现在不同功能的二分查找中，区别是：前者相当于两端都闭区间 [left, right]，后者相当于左闭右开区间 [left, right)，因为索引大小为 nums.length 是越界的。<br>
我们这个算法中使用的是前者 [left, right] 两端都闭的区间。这个区间其实就是每次进行搜索的区间。<br>
while(left &lt;= right) 的终止条件是 left == right + 1，写成区间的形式就是 [right + 1, right]，或者带个具体的数字进去 [3, 2]，可见这时候区间为空，因为没有数字既大于等于 3 又小于等于 2 的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p>
<p>while(left &lt; right) 的终止条件是 left == right，写成区间的形式就是 [2, 2]，这时候区非空，还有一个数 2，但此时 while 循环终止了。也就是说这区间 [2, 2] 被漏掉了，索引 2 没有被搜索，如果这时候直接返回 -1 就是错误的。</p>
<h2 id="为什么-left-mid-1right-mid-1我看有的代码是-right-mid-或者-left-mid没有这些加加减减到底怎么回事怎么判断">为什么 left = mid + 1，right = mid - 1？我看有的代码是 right = mid 或者 left = mid，没有这些加加减减，到底怎么回事，怎么判断？</h2>
<p>当发现索引 mid 不是要找的 target 时，下一步应该去搜索 [left, mid-1] 或者 [mid+1, right]</p>
]]></content>
    </entry>
</feed>